void DoSuccession() {
	// AREA will be defined to the name of the selection area
	// for this inventarisation. If data is set we are doing
	// an inventarisation...
	foreach (Inventarisation inv in 
		EnumerateActiveInventarisations (AREA))
	{
		// The selection of the inventarisation
		Data selection = inv.SelectionMap;
		
		// the data we are analysing...
		Data analyse = progression.GetData ("mydata");
		
		// the resulting dataset
		// value 0 is used for all cells not selected in
		// the AREA map (not selected by user).
		// The icons map is used for visualisation.
		// The data map is used for recording the actual values.
		SparseBitMap8 icons = new SparseBitMap8 (scene);
		SparseBitMap8 data = new SparseBitMap8 (scene);
		
		int tileCount = 0; // we'll count the number of tiles selected
		foreach (Coordinate vc in selection.EnumerateNotZero ()) 
		{
			tileCount ++;
			int value = Distort (inv.UIIndex, analyse.Get (vc));
			
			// somehow map the values of the data we analyse
			// to the icons set...
			switch (value) {
				case 0 : icons.Set (vc, 1); break;
				case 1 :
				case 2 : icons.Set (vc, 2); break;
				default : icons.Set (vc, 3); break;
			}
			
			// save the actual data
			data.Set (vc, value);
		}
		
		// Make the report available.
		AddInventarisation (inv.Name, icons, data);
		
		// The user has to pay for the number of tiles selected.
		budget -= inv.Cost;
		
		// Set some data that scripts can use and 
		// fire the ResearchConducted event
		lastResearch = inv.Name;
		lastResearchGroup = "Inventarisation";
		lastResearchCount = tileCount;
		ResearchConducted ();
	}
}

bool CanSelectTile (int x, int y, UserInteraction ui) {
	return true;
}

int DistortValue (int uiIndex, int value) {
	// Find the distortion range
	if (uiIndex < basicAction.uiList.Count) {
		InventarisationAction invAction = (InventarisationAction)basicAction;
		// Check if we have a distortion range
		if (uiIndex < invAction.distortionRanges.Count) {
			// Return the distorted value using a random number
			float rnd = GetRandomNumber ();
			float min = invAction.distortionRanges [uiIndex].min;
			float max = invAction.distortionRanges [uiIndex].max;
			return (int)((rnd * (max - min)) + min);
		}
		return value;
	}
	return value;
}